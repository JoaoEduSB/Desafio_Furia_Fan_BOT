from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv
import os
import datetime
import random

# Carregar vari√°veis de ambiente
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

# Lista dos pr√≥ximos jogos (sem jogos programados)
proximos_jogos = []

# Fun√ß√£o para obter a sauda√ß√£o com base no hor√°rio
def saudacao():
    hora_atual = datetime.datetime.now().hour
    if 5 <= hora_atual < 12:
        return "Bom dia!"
    elif 12 <= hora_atual < 18:
        return "Boa tarde!"
    else:
        return "Boa noite!"

# Teclado principal
def teclado_principal():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÖ Pr√≥ximos Jogos", callback_data="proximos_jogos")],
        [InlineKeyboardButton("üéØ Line-up Atual", callback_data="lineup")],
        [InlineKeyboardButton("üèÜ Ranking Atual", callback_data="ranking")],
        [InlineKeyboardButton("üí¨ Tor√ßa com a FURIA", callback_data="mostre_sua_torcida")]
    ])

# Teclado de confirma√ß√£o
def teclado_confirmacao():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üëç Sim", callback_data="continuar_sim"), InlineKeyboardButton("üëé N√£o", callback_data="continuar_nao")]
    ])

# Mensagem de boas-vindas
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    saudacao_texto = saudacao()
    await update.message.reply_text(
        f"{saudacao_texto} üëã Seja bem-vindo ao Chat de F√£s da FURIA CS:GO! üéÆ\nEscolha uma op√ß√£o abaixo para interagir:",
        reply_markup=teclado_principal()
    )

# Tratamento dos bot√µes principais
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "proximos_jogos":
        if proximos_jogos:
            jogos = "\n".join([f"üìÖ {jogo['data']} - {jogo['oponente']} √†s {jogo['hora']} ({jogo['torneio']})" for jogo in proximos_jogos])
            await query.message.reply_text(f"üì¢ Pr√≥ximos Jogos da FURIA:\n\n{jogos}")
        else:
            await query.message.reply_text("üì¢ N√£o h√° jogos programados no momento.")
        await query.message.reply_text("Deseja continuar?", reply_markup=teclado_confirmacao())

    elif query.data == "lineup":
        await query.message.reply_text("üéØ Line-up Atual da FURIA:\n- arT\n- yuurih\n- KSCERATO\n- chelo\n- FalleN")
        await query.message.reply_text("Deseja continuar?", reply_markup=teclado_confirmacao())

    elif query.data == "ranking":
        await query.message.reply_text("üèÜ Ranking Atual:\nFURIA est√° em 5¬∫ lugar no ranking mundial de CS:GO! üî•")
        await query.message.reply_text("Deseja continuar?", reply_markup=teclado_confirmacao())

    elif query.data == "mostre_sua_torcida":
        # Torcida aleat√≥ria
        torcida_variantes = [
            "Vamos FURIA! üñ§üíõ #DIADEFURIA", "FURIA √© vida! üî• Vamos, FURIA! üí™", "Vai, FURIA! Vamos com tudo! üí•",
            "FURIA! A equipe que nunca para de brilhar! üåü", "FURIA, a for√ßa do Brasil! üáßüá∑üî• Vamos FURIA!"
        ]
        torcida_texto = random.choice(torcida_variantes)
        await query.message.reply_text(f"üì£ {torcida_texto}")
        await query.message.reply_text("Deseja continuar?", reply_markup=teclado_confirmacao())

    elif query.data == "continuar_sim":
        await query.message.reply_text("Selecione a op√ß√£o que deseja:", reply_markup=teclado_principal())

    elif query.data == "continuar_nao":
        # Caso n√£o haja pr√≥ximos jogos, s√≥ agradece
        await query.message.reply_text("Obrigado! Volte sempre para acompanhar a FURIA! üñ§üíõ")

# Fun√ß√£o para tratar mensagens n√£o reconhecidas
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üîÑ Reiniciar Chat", callback_data="reiniciar")],
        [InlineKeyboardButton("‚ùå N√£o", callback_data="nao_reiniciar")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("‚ùì N√£o entendemos o que voc√™ quis dizer. Deseja reiniciar o chat?", reply_markup=reply_markup)

# Configurar comandos
async def configurar_comandos(application):
    comandos = [
        BotCommand(command="start", description="Iniciar o bot"),
        BotCommand(command="proximosjogos", description="Ver pr√≥ximos jogos da FURIA"),
        BotCommand(command="lineup", description="Ver line-up atual"),
        BotCommand(command="ranking", description="Ver ranking atual"),
        BotCommand(command="mostresuatorcida", description="Mostre sua torcida para a FURIA"),
    ]
    await application.bot.set_my_commands(comandos)

# Fun√ß√£o principal
async def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("proximosjogos", button_handler))  # Alterado para utilizar o mesmo handler
    application.add_handler(CommandHandler("lineup", button_handler))  # Alterado para utilizar o mesmo handler
    application.add_handler(CommandHandler("ranking", button_handler))  # Alterado para utilizar o mesmo handler
    application.add_handler(CommandHandler("mostresuatorcida", button_handler))  # Alterado para utilizar o mesmo handler
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    await configurar_comandos(application)
    print("‚úÖ Bot rodando...")
    await application.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    import asyncio
    asyncio.run(main())